const HtmlWebpackPlugin = require('html-webpack-plugin');
const path = require('path');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
    publicPath: '/',
  },
  module: {
    rules: [
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader'],
      },
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env', '@babel/preset-react'],
          },
        },
      },
      {
        test: /\.(png|jpe?g|gif)$/i,
        use: [
          {
            loader: 'file-loader',
            options: {
              name: '[name].[ext]',
              outputPath: 'images/',
            },
          },
        ],
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './src/index.html',
      filename: 'index.html',
    }),
  ],
  //   new CircularDependencyPlugin({
  //     // `onStart` is called before the cycle detection starts
  //     onStart({ compilation }) {
  //       console.log('start detecting webpack modules cycles');
  //     },
  //     // `onDetected` is called for each module that is cyclical
  //     onDetected({ module: webpackModuleRecord, paths, compilation }) {
  //       // `paths` will be an Array of the relative module paths that make up the cycle
  //       // `module` will be the module record generated by webpack that caused the cycle
  //       compilation.errors.push(new Error(paths.join(' -> ')))
  //     },
  //     // `onEnd` is called before the cycle detection ends
  //     onEnd({ compilation }) {
  //       console.log('end detecting webpack modules cycles');
  //     },
  //   })
  // ],
};